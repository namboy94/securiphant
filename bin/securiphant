#!/usr/bin/env python3
"""LICENSE
Copyright 2019 Hermann Krumrey <hermann@krumreyh.com>

This file is part of securiphant.

securiphant is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

securiphant is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with securiphant.  If not, see <http://www.gnu.org/licenses/>.
LICENSE"""

import argparse
from puffotter.init import cli_start, argparse_add_verbosity
from securiphant import sentry_dsn
from securiphant.utils.systemd import securiphant_services, start_service, \
    stop_service


def main(args: argparse. Namespace):
    """
    The main function of the securiphant application
    :param args: The command line arguments
    :return: None
    """
    if args.mode == "init":
        from securiphant.utils.init import initialize
        initialize(args.configurations)

    elif args.mode == "door-sensor":
        from securiphant.utils.door import door_check_loop
        door_check_loop()

    elif args.mode == "nfc-sensor":
        from securiphant.utils.nfc import nfc_check_loop
        nfc_check_loop()

    elif args.mode == "environment-sensor":
        from securiphant.utils.environment import environment_check_loop
        environment_check_loop()

    elif args.mode == "display":
        from securiphant.utils.qt import start_display
        start_display()

    elif args.mode == "speaker":
        from securiphant.utils.speech import speaker_loop
        speaker_loop()

    elif args.mode == "start":
        for configuration, services in securiphant_services.items():
            if configuration not in args.configurations:
                continue
            for service in services:
                start_service(service)

    elif args.mode == "stop":
        for _, services in securiphant_services.items():
            for service in services:
                stop_service(service)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    argparse_add_verbosity(parser)
    mode_parser = parser.add_subparsers(dest="mode")

    parsers = {}
    for key in [
        "init",
        "door-sensor",
        "nfc-sensor",
        "environment-sensor",
        "display",
        "speaker",
        "start",
        "stop"
    ]:
        parsers[key] = mode_parser.add_parser(key)
        argparse_add_verbosity(parsers[key])

    parsers["init"].add_argument(
        "configurations", nargs="+", choices=securiphant_services.keys(),
        help="For which securiphant role(s) this device should be set up"
    )
    parsers["start"].add_argument(
        "configurations", nargs="+", choices=securiphant_services.keys(),
        help="Which securiphant configurations to start"
    )

    cli_start(
        main,
        parser,
        "Thanks for using securiphant!",
        "securiphant",
        sentry_dsn
    )
